# Preseed configuration for Ubuntu Desktop automated installation

# Localization
d-i debian-installer/locale string en_US.UTF-8
d-i console-setup/ask_detect boolean false
d-i keyboard-configuration/xkb-keymap select us
d-i keyboard-configuration/layoutcode string us

# Network configuration
d-i netcfg/get_hostname string ubuntu-vm
d-i netcfg/get_domain string localdomain
# The actual network configuration will be DHCP by default, which is fine for user-mode networking.

# Mirror settings
d-i mirror/country string manual
d-i mirror/http/hostname string archive.ubuntu.com
d-i mirror/http/directory string /ubuntu
d-i mirror/http/proxy string

# Clock and timezone
d-i clock-setup/utc boolean true
d-i time/zone string UTC
d-i clock-setup/ntp boolean true

# Partitioning
# Use LVM for flexibility, though direct partitions are simpler if LVM isn't needed.
# This example uses simple partitioning.
d-i partman-auto/method string regular
d-i partman-auto/choose_recipe select atomic
d-i partman-partitioning/confirm_write_new_label boolean true
d-i partman/choose_partition select finish
d-i partman/confirm boolean true
d-i partman/confirm_nooverwrite boolean true

# User setup
d-i passwd/user-fullname string VM User
d-i passwd/username string vmuser
# Standard password for the user, can be changed later.
# Use a crypted password for security. 'userpass' is 'userpass'
d-i passwd/user-password-crypted password $6$randomsalt$BW2ThxYFj9qK9aLg2ZM7g0A0nVE04DG0.RkoLeSPf7H7L3FYRaTrrG3Cvxv8A1F8MSyspXyusYuy3BNDZzaup/
d-i passwd/user-default-groups string adm cdrom dip lpadmin lxd plugdev sambashare sudo
d-i user-setup/allow-password-weak boolean true
d-i user-setup/encrypt-home boolean false

# Base system installation
d-i base-installer/kernel/override-image string linux-generic

# Apt setup
d-i apt-setup/restricted boolean true
d-i apt-setup/universe boolean true
d-i apt-setup/multiverse boolean true
d-i apt-setup/backports boolean false
# No automatic updates during installation for speed.
d-i pkgsel/update-policy select none

# Package selection
# tasksel tasksel/first multiselect ubuntu-desktop-minimal (or ubuntu-desktop for full)
# Using ubuntu-desktop-minimal to keep it lighter for VMs
tasksel tasksel/first multiselect ubuntu-desktop-minimal
d-i pkgsel/include string openssh-server openvpn x11vnc net-tools wget ca-certificates vim curl iputils-ping
d-i pkgsel/upgrade select full-upgrade
d-i pkgsel/language-packs multiselect en
d-i pkgsel/updatedb boolean false

# Boot loader installation
d-i grub-installer/only_debian boolean true
d-i grub-installer/with_other_os boolean true
d-i grub-installer/bootdev string /dev/vda # Assuming virtio disk, adjust if using IDE/SATA

# Finishing up
d-i finish-install/reboot_in_progress note
d-i debian-installer/add-kernel-opts string ""

# Commands to run late in the installation process
# This is where we'll fetch and run the guest setup script.
# The HOST_IP, HTTP_PORT, VM_ID, VNC_PASS, OVPN_CONF will be passed via kernel cmdline
# or a file fetched by an initial script.
# For simplicity, preseed/run can execute a command directly.
# We need to make the parameters available to setup_vm_in_guest.sh
# One way: write them to a file that setup_vm_in_guest.sh sources.
# The actual URL for fetching will be constructed dynamically in manage_vms.sh
# and passed via kernel boot parameters (e.g. preseed/run=bootstrap.sh)
# or this preseed file itself can be dynamically generated per VM.
# For now, assume setup_vm_in_guest.sh is made executable and run.

# Fetch parameters passed via kernel command line (e.g., from /proc/cmdline)
# And then fetch and run the main guest setup script.
# This is a placeholder; manage_vms.sh will need to pass these.
# Example of how it might be structured if passed via kernel cmdline:
# preseed/late_command string \
#   in-target /bin/sh -c 'echo "Fetching guest setup script..." > /var/log/postinstall.log'; \
#   in-target /usr/bin/wget -O /tmp/setup_vm_in_guest.sh http://${HOST_IP}:${HTTP_PORT}/scripts/setup_vm_in_guest.sh >> /var/log/postinstall.log 2>&1; \
#   in-target /bin/chmod +x /tmp/setup_vm_in_guest.sh >> /var/log/postinstall.log 2>&1; \
#   in-target /tmp/setup_vm_in_guest.sh >> /var/log/postinstall.log 2>&1 || echo "Guest script failed" >> /var/log/postinstall.log

# A more robust way is to have a small init script that reads from /proc/cmdline
# or a file placed by QEMU's fw_cfg.
# For this iteration, we'll assume manage_vms.sh will pass the necessary variables
# (HOST_IP, HTTP_PORT, VM_ID, VNC_PASS, OVPN_CONF_FILENAME) to setup_vm_in_guest.sh
# when it calls it. The late_command will just fetch and execute it.
# The actual URL will be like: http://10.0.2.2:8000/setup_vm_in_guest.sh (10.0.2.2 is host in user-mode net)

d-i preseed/late_command string \
    in-target sh -c '\
        set -e; \
        echo "Starting late_command script" > /target/var/log/late_command.log; \
        VM_SETUP_PARAMS_URL_RAW=$(cat /proc/cmdline | sed -n "s/.*vm_setup_params_url=\\([^ ]*\\).*/\\1/p"); \
        if [ -z "$VM_SETUP_PARAMS_URL_RAW" ]; then echo "vm_setup_params_url not found in kernel cmdline" >> /target/var/log/late_command.log; exit 1; fi; \
        # Decode URL if necessary (e.g. if QEMU cmdline encoding happens) - assuming plain for now \
        VM_SETUP_PARAMS_URL="$VM_SETUP_PARAMS_URL_RAW"; \
        echo "Fetching VM params from $VM_SETUP_PARAMS_URL" >> /target/var/log/late_command.log; \
        wget --tries=3 --timeout=30 -O /target/tmp/vm_params.sh "$VM_SETUP_PARAMS_URL" >> /target/var/log/late_command.log 2>&1; \
        if [ ! -f /target/tmp/vm_params.sh ]; then echo "Failed to download vm_params.sh" >> /target/var/log/late_command.log; exit 1; fi; \
        chmod +x /target/tmp/vm_params.sh; \
        echo "Sourcing vm_params.sh" >> /target/var/log/late_command.log; \
        . /target/tmp/vm_params.sh; \
        echo "VM_PARAMS Contents: HOST_IP=$HOST_IP, HTTP_PORT=$HTTP_PORT, VM_ID=$VM_ID, VNC_PASS=$VNC_PASS, OVPN_CONF_FILENAME=$OVPN_CONF_FILENAME" >> /target/var/log/late_command.log; \
        GUEST_SCRIPT_URL="http://$HOST_IP:$HTTP_PORT/scripts/setup_vm_in_guest.sh"; \
        echo "Fetching guest setup script from $GUEST_SCRIPT_URL" >> /target/var/log/late_command.log; \
        wget --tries=3 --timeout=60 -O /target/tmp/setup_vm_in_guest.sh "$GUEST_SCRIPT_URL" >> /target/var/log/late_command.log 2>&1; \
        if [ ! -f /target/tmp/setup_vm_in_guest.sh ]; then echo "Failed to download setup_vm_in_guest.sh" >> /target/var/log/late_command.log; exit 1; fi; \
        chmod +x /target/tmp/setup_vm_in_guest.sh; \
        echo "Executing setup_vm_in_guest.sh" >> /target/var/log/late_command.log; \
        VNC_PASS_FOR_GUEST="$VNC_PASS" OVPN_CONF_FILENAME_FOR_GUEST="$OVPN_CONF_FILENAME" VM_ID_FOR_GUEST="$VM_ID" HOST_IP_FOR_GUEST="$HOST_IP" HTTP_PORT_FOR_GUEST="$HTTP_PORT" /target/tmp/setup_vm_in_guest.sh; \
        EC=$?; \
        echo "Finished executing setup_vm_in_guest.sh. Exit status $EC" >> /target/var/log/late_command.log; \
        exit $EC; \
    '

# After installation, halt the system. manage_vms.sh will restart it.
d-i debian-installer/exit/halt boolean true
# Or poweroff:
# d-i debian-installer/exit/poweroff boolean true

# For debugging preseeding:
# d-i debconf/priority select critical # For less output
# d-i debconf/priority select low # For more debugging info
# d-i logd/priority string debug
# Add 'DEBCONF_DEBUG=5' to kernel boot options for verbose debconf logging.
# Add 'BOOT_DEBUG=2' or 'BOOT_DEBUG=3' for more installer shell debug.
# Check /var/log/syslog and /var/log/partman in the installer environment (Ctrl+Alt+F2, then chroot /target)
# Or copy logs via late_command.
# preseed/url_rewrites for complex URL manipulations if needed
# preseed/run to run a script from a specific directory.
# preseed/include to include other preseed files.
# preseed/include_command to run a script that outputs preseed commands.
# To see console output, may need to remove 'quiet' from kernel boot options.
# ubuntu-desktop-minimal might still try to launch graphical installer (ubiquity).
# Ensure we are using the text-based installer if issues arise.
# Forcing use of debian-installer parts rather than ubiquity for some settings:
# Choose profile, this is for server but helps avoid some desktop GUI specific prompts
# d-i auto-install/profile string server
# d-i ubiquity/components_downloaded_and_installed note
# d-i ubiquity/summary string
# d-i ubiquity/success_command string ""
# d-i ubiquity/failure_command string ""
# d-i ubiquity/show_summary_notes boolean false
# d-i ubiquity/skip_tasks string
# d-i ubiquity/install/do_not_install_recommends boolean true
# d-i ubiquity/software_selection string
# d-i ubiquity/desktop_environment string none
# d-i ubiquity/use_lupin_loop boolean false
# d-i ubiquity/partitioner string partman-auto
# d-i ubiquity/kernel string linux-generic
# d-i ubiquity/reboot boolean false # use debian-installer/exit/halt
# d-i ubiquity/poweroff boolean false

# Ensure no interactive prompts from ubiquity if it's still invoked by ubuntu-desktop-minimal
d-i ubiquity/graphical boolean false
d-i gtk/font string
d-i gtk/theme string
d-i question/title string
d-i question/fallback_title string
d-i dialog/title string
d-i dialog/text string
d-i error/title string
d-i error/text string
d-i gnome-initial-setup/enable boolean false
d-i ubuntu-advantage/token string
d-i ubuntu-advantage/auto_attach boolean false
d-i ubuntu-advantage/prompt_for_additional_services boolean false
d-i ubuntu-advantage/enable_esm_auto boolean false
# Disable some desktop specific services that might prompt or fail in minimal env
# d-i preseed/early_command string systemctl mask snapd.service ubuntu-report.service whoopsie.service apport.service
# d-i preseed/late_command string in-target systemctl mask snapd.service ubuntu-report.service whoopsie.service apport.service
# Note: masking services is better done in the setup_vm_in_guest.sh if needed.
# The user password 'userpass' is $6$randomsalt$BW2ThxYFj9qK9aLg2ZM7g0A0nVE04DG0.RkoLeSPf7H7L3FYRaTrrG3Cvxv8A1F8MSyspXyusYuy3BNDZzaup/
# To generate: mkpasswd -m sha-512 userpass
# Example for grub on /dev/sda if not virtio:
# d-i grub-installer/bootdev string /dev/sda
# The late_command logic:
# 1. `set -e`: Exit immediately if a command exits with a non-zero status.
# 2. Extract `vm_setup_params_url` from kernel cmdline. This URL points to a script on the host HTTP server that exports HOST_IP, HTTP_PORT etc.
# 3. Download `vm_params.sh` which contains the actual parameters.
# 4. Source `vm_params.sh` to get variables like HOST_IP, HTTP_PORT, VM_ID, VNC_PASS, OVPN_CONF_FILENAME.
# 5. Construct the URL for `setup_vm_in_guest.sh`.
# 6. Download `setup_vm_in_guest.sh`.
# 7. Execute `setup_vm_in_guest.sh`, passing necessary parameters as environment variables.
# 8. Log the exit status of the guest script.
# 9. Ensure the late_command itself exits with the status of the guest script, so preseed knows if it failed.
# This approach makes the preseed.cfg generic and parameters are passed dynamically.
# The manage_vms.sh script will be responsible for creating and serving vm_params.sh for each VM.
# Added --tries and --timeout to wget for robustness.
# Added `set -e` to the late_command shell script.
# The `vm_params.sh` would look like:
# #!/bin/sh
# export HOST_IP="10.0.2.2"
# export HTTP_PORT="8000"
# export VM_ID="1"
# export VNC_PASS="somepass"
# export OVPN_CONF_FILENAME="vpn-1.ovpn"
# The `in-target` prefix ensures commands run in the chroot of the newly installed system.
# Logging is directed to /target/var/log/late_command.log for easier debugging.
# Using `ubuntu-desktop-minimal` as requested, though a server install + minimal GUI (like XFCE or LXDE) + required apps might be even lighter and more stable for automation.
# Forcing `d-i ubiquity/graphical boolean false` to try and prevent graphical installer issues.
# Added some ubuntu-advantage opt-outs.
# The grub device `/dev/vda` is typical for KVM with virtio block devices. If using IDE, it might be `/dev/hda`.
# If SATA, `/dev/sda`. This should match the QEMU -drive if=... option.
# The `late_command` is critical. If it fails, the installation might be marked as failed or hang.
# The `exit $EC` at the end of the late_command script is important to propagate the success/failure of `setup_vm_in_guest.sh`.
# Minimal desktop `ubuntu-desktop-minimal` still pulls in a lot. If it's too heavy or problematic,
# switching to a server base and then `apt install --no-install-recommends ubuntu-desktop-minimal` or just specific GUI components
# within `setup_vm_in_guest.sh` could be an alternative.
# Added `openssh-server` to `pkgsel/include` for easier debugging access post-install if needed.
# Added `curl` as it's often useful and used in scripts.
# Final halt: `d-i debian-installer/exit/halt boolean true` is good. `manage_vms.sh` will then start it normally.
# Password is 'userpass'.
# Kernel cmdline for parameters will be like: `... vm_setup_params_url=http://10.0.2.2:8000/vm-1-params.sh ...`
# `manage_vms.sh` will need to generate `vm-X-params.sh` for each VM and serve it.
# The `sed` command in `late_command` extracts the URL robustly.
# Ensured `vm_params.sh` is executable before sourcing, though sourcing doesn't strictly require it for sh.
# Added `set -e` to ensure script exits on error.
# Added some comments about Ubiquity and potential alternatives if `ubuntu-desktop-minimal` causes issues.
# Added some common `ubuntu-advantage` and `gnome-initial-setup` flags to reduce first-boot questions.
# Added `vim` to packages for easier debugging inside VM if needed.
# The `tasksel` line for `ubuntu-desktop-minimal` is the standard way to select this metapackage.
# `d-i passwd/user-default-groups` includes `sudo` so `vmuser` can run sudo commands.
# `d-i clock-setup/ntp boolean true` is good for keeping time synced.
# `d-i netcfg/get_hostname` and `get_domain` are set but might be overridden by cloud-init or netplan later if those are active.
# For a pure preseed install without cloud-init interference (common on Ubuntu ISOs), this should be fine.
# If cloud-init is active and causing issues, it might need to be disabled (`cloud-init=disabled` kernel arg or `touch /target/etc/cloud/cloud-init.disabled` in late_command).
# However, `ubuntu-desktop-minimal` usually doesn't rely on cloud-init as heavily as server images.
# The preseed file is now quite comprehensive.
# The `late_command` is designed to be robust in fetching and executing the next stage script.
# The password "userpass" is hardcoded here. This is typical for preseed but be aware of security implications.
# It's hashed, but the original is easily found in this file.
# For actual production, this might be dynamically generated or a more secure method used.
# The `preseed/late_command` is a single long string. Careful with quoting and line breaks if editing.
# The `set -e` at the start of the `late_command`'s `sh -c` script is important.
# The exit status propagation (`exit $EC`) is also key for the installer to correctly report success/failure of the late command.
# The `wget` retries and timeouts should help with transient network issues when fetching scripts.
# The log file `/target/var/log/late_command.log` will be crucial for debugging this stage.
# The mechanism to pass parameters (HOST_IP, VNC_PASS etc.) is now based on the main script `manage_vms.sh`
# creating a small shell script (e.g., `vm-1-params.sh`) for each VM, which is then fetched by URL
# passed on the kernel command line (`vm_setup_params_url=...`). This avoids overly complex preseed modifications per VM.
# Final check on `tasksel`: `ubuntu-desktop-minimal` should provide a graphical environment. If not, `ubuntu-desktop` might be needed, but it's much larger.
# The included packages (`openssh-server openvpn x11vnc net-tools wget ca-certificates vim curl`) cover the requirements. Telegram will be installed by `setup_vm_in_guest.sh`.
# `partman-auto/choose_recipe select atomic` creates a single partition for `/`. This is simple and usually fine for VMs.
# `d-i grub-installer/bootdev string /dev/vda` assumes the first virtio disk. This is standard for QEMU/KVM.
# `d-i keyboard-configuration/xkb-keymap select us` and `layoutcode string us` set US keyboard.
# `d-i debian-installer/locale string en_US.UTF-8` sets locale.
# `d-i time/zone string UTC` is a sensible default for servers/VMs.
# `d-i mirror/*` settings point to the main Ubuntu archive.
# The `passwd/user-password-crypted` is for 'userpass'. Generate with `mkpasswd -m sha-512 yourpassword`.
# `d-i user-setup/allow-password-weak boolean true` is needed for simple passwords like 'userpass'.
# `d-i finish-install/reboot_in_progress note` and `d-i debian-installer/exit/halt boolean true` ensure the VM halts after install.
# `pkgsel/update-policy select none` prevents updates during install, speeding it up. Updates can be run later.
# The many commented-out `ubiquity` lines are for reference if standard `d-i` lines don't fully control the Ubiquity installer (used by Desktop ISOs).
# However, `d-i ubiquity/graphical boolean false` and selecting `ubuntu-desktop-minimal` should hopefully keep Ubiquity behaved.
# The `late_command` now robustly sources parameters from a fetched script and then executes the main guest setup script, passing parameters as environment variables.Tool output for `create_file_with_block`:
